!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.myLibrary=n():e.myLibrary=n()}(self,()=>(()=>{var __webpack_modules__={"./tpl_c/js/all.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   renderStarRatings: () => (/* binding */ renderStarRatings),\n/* harmony export */   test: () => (/* binding */ test)\n/* harmony export */ });\n// 工具函數\nconst qs = selector => document.querySelector(selector);\nconst qsa = selector => document.querySelectorAll(selector);\n\n// 修改 a 連結標籤 target 屬性\nfunction modifyLinkTargets() {\n  const links = document.querySelectorAll("a");\n  links.forEach(a => {\n    if (a.hasAttribute("target") && !a.hasAttribute("rel")) {\n      a.setAttribute("rel", "noreferrer noopener");\n    }\n  });\n}\n// 評分星星\nfunction renderStarRatings() {\n  console.log("renderStarRatings 被呼叫了");\n  const starRatings = document.querySelectorAll(".star-rating");\n  if (starRatings) {\n    starRatings.forEach(starRating => {\n      const score = parseInt(starRating.getAttribute("data-score"), 10);\n      let starsHTML = "";\n      for (let i = 0; i < score; i++) {\n        starsHTML += `\n        <li class="star">\n          <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="#5f6368" viewBox="0 -960 960 960">\n            <path d="m305-704 112-145q12-16 28.5-23.5T480-880q18 0 34.5 7.5T543-849l112 145 170 57q26 8 41 29.5t15 47.5q0 12-3.5 24T866-523L756-367l4 164q1 35-23 59t-56 24q-2 0-22-3l-179-50-179 50q-5 2-11 2.5t-11 .5q-32 0-56-24t-23-59l4-165L95-523q-8-11-11.5-23T80-570q0-25 14.5-46.5T135-647l170-57Z"/>\n          </svg>\n        </li>\n        `;\n        starRating.innerHTML = starsHTML;\n      }\n    });\n  }\n}\n// 漢堡選單 toggle\nfunction toggleMenu() {\n  const collapse = document.querySelector(".collapse");\n  const collapseToggle = document.querySelector(".collapse__toggle");\n  if (collapse.classList.contains("show")) {\n    hideMenu(collapse, collapseToggle);\n  } else {\n    showMenu(collapse, collapseToggle);\n  }\n}\n// 顯示漢堡選單\nfunction showMenu(collapse, collapseToggle) {\n  collapseToggle.classList.add("collapsed");\n  collapseToggle.setAttribute("aria-expanded", "true");\n  collapseToggle.setAttribute("aria-label", "關閉選單");\n  collapse.classList.add("show");\n  document.body.style.overflow = "hidden";\n}\n// 隱藏漢堡選單\nfunction hideMenu(collapse, collapseToggle) {\n  collapseToggle.classList.remove("collapsed");\n  collapseToggle.setAttribute("aria-expanded", "false");\n  collapseToggle.setAttribute("aria-label", "打開選單");\n  collapse.classList.remove("show");\n  document.body.style.overflow = "auto";\n}\n// 點擊項目隱藏漢堡選單\nfunction handleCollapseMenuClick(event) {\n  const target = event.target;\n  if (target.classList.contains("collapse__link")) {\n    toggleMenu();\n  } else if (target.classList.contains("collapse__title") && target.tagName.toLowerCase() === "a") {\n    toggleMenu();\n  }\n}\n// 手風琴 menu toggle\nfunction toggleAccordionContent(event) {\n  const header = event.currentTarget;\n  const accordionItem = header.closest(".accordion__item");\n  const accordionSubtitle = header.querySelector(".accordion__header-subtitle");\n  const accordionContent = header.nextElementSibling;\n  const isActive = header.classList.contains("active");\n  accordionSubtitle.textContent = isActive ? "(展開目錄)" : "(縮小目錄)";\n  accordionItem.classList.toggle("active", !isActive);\n  accordionContent.classList.toggle("active", !isActive);\n  header.classList.toggle("active", !isActive);\n}\n\n// 配置\nconst CONFIG = {\n  // API_URL: \'http://bestdoctor.lab.net/www/bestdoctor_www/api/api.contact.php\',\n  // API_URL: \'fail.json\',\n  // API_URL: \'success.json\',\n  SELECTORS: {\n    FORM: "#bestdoctorContact",\n    CONTACT_TITLE: "#contact__title",\n    COUNTDOWN: "#countdown",\n    REPLY: "#Reply",\n    REPLY_SUCCESS: "#ReplySuccess",\n    REPLY_ERROR: "#ReplyError"\n  },\n  REDIRECT_DELAY: 3000\n};\n// 表單狀態管理\nconst FormState = {\n  IDLE: "idle",\n  SUBMITTING: "submitting",\n  SUCCESS: "success",\n  ERROR: "error",\n  CAPTCHA_ERROR: "captcha_error" // 新增的狀態\n};\n// 表單處理\nfunction handleFormSubmit(e) {\n  // e.preventDefault();\n  const form = e.target;\n  scrollToElement(CONFIG.SELECTORS.CONTACT_TITLE);\n  updateFormState(FormState.SUBMITTING);\n  submitForm(form).then(response => {\n    console.log("response", response);\n    if (response.status >= 200 && response.status < 300) {\n      console.log("傳送成功", response.message);\n      updateFormState(FormState.SUCCESS);\n      animateSuccess().then(() => {\n        // startRedirectCountdown(CONFIG.REDIRECT_DELAY); // 重定向倒計時\n        startRedirectCountdown(\n        // 重定向倒計時\n        CONFIG.REDIRECT_DELAY, "countdown", redirectToReferrer);\n      });\n    } else {\n      throw new Error(response.message || "傳送失敗");\n    }\n  }).catch(error => {\n    console.error("傳送錯誤", error);\n    if (error.message === "驗證碼錯誤") {\n      showCaptchaError(error.message);\n    } else {\n      updateFormState(FormState.ERROR);\n      // showErrorMessage(error.message);\n      return animateError();\n    }\n  });\n}\n// 表單驗證碼錯誤\nfunction showCaptchaError(message) {\n  const errorElement = qs(CONFIG.SELECTORS.REPLY_ERROR);\n  const form = qs(CONFIG.SELECTORS.FORM);\n  const replyElement = qs(CONFIG.SELECTORS.REPLY);\n  form.style.display = "none";\n  replyElement.classList.remove("hidden");\n  replyElement.classList.add("flex");\n  errorElement.classList.remove("hidden");\n  errorElement.classList.add("flex");\n  const titleElement = errorElement.querySelector(".contact__intro-title");\n  if (titleElement) {\n    titleElement.textContent = message;\n  }\n\n  // 添加倒數文字\n  const countdownElement = errorElement.querySelector(".contact__intro-text");\n  if (!countdownElement) {\n    const newCountdownElement = document.createElement("p");\n    newCountdownElement.className = "contact__intro-text";\n    newCountdownElement.innerHTML = \'將在 <span id="captchaCountdown" class="countdown">3</span> 秒後重新顯示表單\';\n    errorElement.appendChild(newCountdownElement);\n  } else {\n    countdownElement.innerHTML = \'將在 <span id="captchaCountdown" class="countdown">3</span> 秒後重新顯示表單\';\n  }\n  startRedirectCountdown(3000, "captchaCountdown", showFormAfterError);\n}\n// 提交表單\nfunction submitForm(form) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    const formData = new FormData(form);\n    const apiUrl = form.getAttribute("action");\n    if (!apiUrl) {\n      reject(new Error("表單缺少 action 屬性"));\n      return;\n    }\n    // xhr.open(\'POST\', CONFIG.API_URL, true);\n    // xhr.open(\'GET\', CONFIG.API_URL, true);\n    xhr.open(form.method || "POST", apiUrl, true);\n    xhr.responseType = "json";\n    xhr.onload = function () {\n      if (xhr.status >= 200 && xhr.status < 300) {\n        try {\n          // const response = JSON.parse(xhr.responseText);\n          // const response = xhr.response;\n          console.log("response", xhr.response.message || xhr.response);\n          resolve(xhr.response);\n        } catch (error) {\n          console.error("傳送錯誤", error);\n          reject(new Error(error));\n        }\n      } else if (xhr.status === 400 && xhr.response.message === "驗證碼錯誤") {\n        console.error(xhr.response?.message || xhr.response);\n        reject(new Error("驗證碼錯誤"));\n      } else {\n        reject(new Error(`錯誤狀態：${xhr.status}, ${xhr.response?.message || xhr.response || "未知錯誤"}`));\n      }\n    };\n    xhr.onerror = function () {\n      reject(new Error("網路錯誤"));\n    };\n    xhr.send(formData);\n  });\n}\n// 更新表單狀態\nfunction updateFormState(state) {\n  const form = qs(CONFIG.SELECTORS.FORM);\n  form.dataset.state = state;\n  updateUIForState(state);\n}\n// 根據狀態更新畫面\nfunction updateUIForState(state) {\n  const replyElement = qs(CONFIG.SELECTORS.REPLY);\n  const successElement = qs(CONFIG.SELECTORS.REPLY_SUCCESS);\n  const errorElement = qs(CONFIG.SELECTORS.REPLY_ERROR);\n  const isReplyVisible = state === FormState.SUCCESS || state === FormState.ERROR;\n  replyElement.classList.toggle("hidden", !isReplyVisible);\n  replyElement.classList.toggle("flex", isReplyVisible);\n  const isSuccessVisible = state === FormState.SUCCESS;\n  successElement.classList.toggle("hidden", !isSuccessVisible);\n  successElement.classList.toggle("flex", isSuccessVisible);\n  const isErrorVisible = state === FormState.ERROR;\n  errorElement.classList.toggle("hidden", !isErrorVisible);\n  errorElement.classList.toggle("flex", isErrorVisible);\n}\n// 動畫處理-成功\nfunction animateSuccess() {\n  return new Promise(resolve => {\n    requestAnimationFrame(() => {\n      const form = qs(CONFIG.SELECTORS.FORM);\n      form.style.display = "none";\n      updateUIForState(FormState.SUCCESS);\n      resolve();\n    });\n  });\n}\n// 動畫處理-失敗\nfunction animateError() {\n  return new Promise(resolve => {\n    requestAnimationFrame(() => {\n      const form = qs(CONFIG.SELECTORS.FORM);\n      form.style.display = "none";\n      updateUIForState(FormState.ERROR);\n      resolve();\n    });\n  });\n}\n// 開始重定向倒計時\n// function startRedirectCountdown(delay) {\n//   const countdownElement = qs(CONFIG.SELECTORS.COUNTDOWN);\n//   if (!countdownElement) {\n//     console.error("找不到 countdownElement");\n//     return;\n//   }\n\n//   let timeLeft = Math.floor(delay / 1000);\n//   countdownElement.textContent = timeLeft;\n\n//   const updateCountdown = setInterval(() => {\n//     timeLeft--;\n//     countdownElement.textContent = timeLeft;\n//     if (timeLeft === 0) {\n//       clearInterval(updateCountdown);\n//       // 倒數結束後返回上一頁\n//       redirectToReferrer();\n//     }\n//   }, 1000); // 每秒更新一次\n// }\n// 開始重定向倒計時\nfunction startRedirectCountdown(delay, elementId, callback) {\n  const countdownElement = document.getElementById(elementId);\n  if (!countdownElement) {\n    console.error(`找不到 ID 為 ${elementId} 的元素`);\n    return;\n  }\n  let timeLeft = Math.floor(delay / 1000);\n  countdownElement.textContent = timeLeft;\n  const updateCountdown = setInterval(() => {\n    timeLeft--;\n    countdownElement.textContent = timeLeft;\n    if (timeLeft === 0) {\n      clearInterval(updateCountdown);\n      if (typeof callback === "function") {\n        callback();\n      }\n    }\n  }, 1000);\n}\n// 顯示錯誤後重新顯示表單\nfunction showFormAfterError() {\n  const errorElement = qs(CONFIG.SELECTORS.REPLY_ERROR);\n  const form = qs(CONFIG.SELECTORS.FORM);\n  const replyElement = qs(CONFIG.SELECTORS.REPLY);\n  replyElement.classList.add("hidden");\n  replyElement.classList.remove("flex");\n  errorElement.classList.add("hidden");\n  errorElement.classList.remove("flex");\n  form.style.display = "block";\n\n  // 重新生成驗證碼圖片\n  // refreshCaptcha();\n\n  // 滾動到表單頂部\n  scrollToElement(CONFIG.SELECTORS.CONTACT_TITLE);\n}\n// 重定向\nfunction redirectToReferrer() {\n  if (document.referrer) {\n    window.location.href = document.referrer;\n  } else {\n    window.location.reload();\n  }\n}\n// 顯示錯誤消息\nfunction showErrorMessage(message) {\n  // const errorElement = qs("#ReplyError .contact__intro-title");\n  // errorElement.textContent = message;\n\n  const errorElement = qs(CONFIG.SELECTORS.REPLY_ERROR);\n  const form = qs(CONFIG.SELECTORS.FORM);\n  form.style.display = "none";\n  errorElement.innerHTML = `\n  <p class="contact__intro-title">${message}</p>\n  `;\n}\n// 滑到指定元素\n// function scrollToElement(selector) {\n//   const element = qs(selector);\n//   element.scrollIntoView({\n//       behavior: "smooth",\n//       block: "start",\n//       inline: "center",\n//     });\n//   }\n// 滑到指定元素\nfunction scrollToElement(selector) {\n  const $element = $(selector);\n  if ($element.length) {\n    $("html, body").animate({\n      scrollTop: $element.offset().top\n    }, 500, "swing");\n  }\n}\n// 表單初始化\nfunction initializeForm() {\n  const form = qs(CONFIG.SELECTORS.FORM);\n  if (form) {\n    initializeFormValidation();\n    // form.addEventListener("submit", handleFormSubmit);\n  }\n}\n// 初始化表單驗證\nfunction initializeFormValidation() {\n  const $form = $(CONFIG.SELECTORS.FORM);\n  if (!$form.length) return;\n  $form.validate({\n    // 表單提交\n    submitHandler: function (form, event) {\n      event.preventDefault(); // 阻止默認提交行為\n      handleFormSubmit(event);\n    },\n    // 驗證規則\n    rules: {\n      // contact\n      "contact_services[]": {\n        checkboxGroup: "input[name=\'contact_services[]\']"\n      },\n      contact_company: "required",\n      contact_company_phone: {\n        required: true,\n        companyPhone: true\n      },\n      contact_your_name: "required",\n      contact_your_title: "required",\n      contact_your_cellPhone: {\n        required: true,\n        cellPhone: true\n      },\n      contact_your_email: {\n        required: true,\n        email: true\n      },\n      antispam: "required",\n      // 驗證碼\n      // brand\n      brand_industry: "required",\n      brand_company: "required",\n      brand_company_phone: {\n        required: true,\n        companyPhone: true\n      },\n      brand_your_name: "required",\n      brand_your_cell_phone: {\n        required: true,\n        cellPhone: true\n      },\n      brand_your_email: {\n        required: true,\n        email: true\n      },\n      // sales\n      "sales_cities[]": {\n        checkboxGroup: "input[name=\'sales_cities[]\']"\n      },\n      sales_company: "required",\n      sales_company_phone: {\n        required: true,\n        companyPhone: true\n      },\n      sales_your_name: "required",\n      sales_your_cell_phone: {\n        required: true,\n        cellPhone: true\n      },\n      sales_your_email: {\n        required: true,\n        email: true\n      },\n      sales_about_you: "required"\n    },\n    // 錯誤訊息\n    messages: {\n      // contact\n      "contact_services[]": {\n        checkboxGroup: "請至少勾選一個項目"\n      },\n      contact_company: "請輸入您的診所名稱",\n      contact_company_phone: {\n        required: "請輸入診所電話",\n        companyPhone: "請確認電話號碼格式為：0X-XXXXXXXX"\n      },\n      contact_your_name: "請輸入您的姓名",\n      contact_your_title: "請輸入您的職稱",\n      contact_your_cellPhone: {\n        required: "請輸入您的手機號碼",\n        cellPhone: "請確認手機格式為：09XXXXXXXX"\n      },\n      contact_your_email: {\n        required: "請輸入您的電子郵件",\n        email: "請輸入有效的電子郵件地址"\n      },\n      antispam: "請輸入驗證碼",\n      "sales_cities[]": {\n        checkboxGroup: "請至少選擇一個城市"\n      },\n      // brand\n      brand_industry: "請至少選擇一項",\n      brand_company: "請輸入您的公司名稱",\n      brand_company_phone: {\n        required: "請輸入公司電話",\n        companyPhone: "請確認電話號碼格式為：0X-XXXXXXXX"\n      },\n      brand_your_name: "請輸入您的姓名",\n      brand_your_cell_phone: {\n        required: "請輸入您的手機號碼",\n        cellPhone: "請確認手機格式為：09XXXXXXXX"\n      },\n      brand_your_email: {\n        required: "請輸入您的電子郵件",\n        email: "請輸入有效的電子郵件地址"\n      },\n      // sales\n      sales_company: "請輸入您的公司名稱",\n      sales_company_phone: {\n        required: "請輸入公司電話",\n        companyPhone: "請確認電話號碼格式為：0X-XXXXXXXX"\n      },\n      sales_your_name: "請輸入您的姓名",\n      sales_your_cell_phone: {\n        required: "請輸入您的手機號碼",\n        cellPhone: "請確認手機格式為：09XXXXXXXX"\n      },\n      sales_your_email: {\n        required: "請輸入您的電子郵件",\n        email: "請輸入有效的電子郵件地址"\n      },\n      sales_about_you: "請輸入您的業務專長"\n    },\n    errorElement: "div",\n    errorPlacement: customErrorPlacement,\n    highlight: customHighlight,\n    unhighlight: customUnhighlight,\n    // onfocusout: function (element) {\n    //   this.element(element);\n    // },\n    // invalidHandler: function (event, validator) {\n    //   if (validator.errorList.length > 0) {\n    //     let firstError = $(validator.errorList[0].element);\n    //     console.log("firstError", firstError);\n    //     $("html, body").animate(\n    //       {\n    //         scrollTop: firstError.offset().top - $(window).height() / 2,\n    //       },\n    //       500\n    //     );\n    //   }\n    // },\n    invalidHandler: function (event, validator) {\n      if (validator.errorList.length > 0) {\n        let firstError = $(validator.errorList[0].element);\n        console.log("firstError", firstError);\n        firstError[0].scrollIntoView({\n          behavior: "smooth"\n        });\n      }\n    }\n  });\n  addCustomValidationMethods();\n}\n// 自定義錯誤訊息放置\nfunction customErrorPlacement(error, element) {\n  if (element.attr("type") === "checkbox" || element.attr("type") === "radio") {\n    const group = element.closest(".checkbox-group, .radio-group");\n    const errorContainer = getOrCreateErrorContainer(group);\n    errorContainer.html("").append(createErrorIcon()).append(error);\n    error.addClass(element.attr("type") + "-error");\n  } else {\n    const errorContainer = getOrCreateErrorContainer(element);\n    errorContainer.html("").append(createErrorIcon()).append(error);\n  }\n}\n// 取得或創建錯誤訊息容器\nfunction getOrCreateErrorContainer(element) {\n  let errorContainer = element.next(".error-container");\n  if (!errorContainer.length) {\n    errorContainer = $(\'<div class="error-container"></div>\');\n    errorContainer.insertAfter(element);\n  }\n  return errorContainer;\n}\n// 創建錯誤訊息 icon\nfunction createErrorIcon() {\n  return $(`<svg data-encore-id="icon" role="img" aria-label="Error:" fill="#f15e6c" width="16px" height="16px" aria-hidden="true" viewBox="0 0 16 16">\n    <path d="M8 1.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13zM0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8z"></path>\n    <path d="M7.25 9V4h1.5v5h-1.5zm0 3.026v-1.5h1.5v1.5h-1.5z"></path>\n  </svg>`);\n}\n// 自定義加上錯誤樣式\nfunction customHighlight(element) {\n  const $element = $(element);\n  if ($element.attr("type") === "checkbox" || $element.attr("type") === "radio") {\n    const group = $element.closest(".checkbox-group, .radio-group");\n    group.addClass("input-error");\n    group.next(".error-container").show();\n  } else {\n    $element.addClass("input-error");\n    $element.next(".error-container").show();\n  }\n}\n// 自定義移除錯誤樣式\nfunction customUnhighlight(element) {\n  const $element = $(element);\n  if ($element.attr("type") === "checkbox" || $element.attr("type") === "radio") {\n    const group = $element.closest(".checkbox-group, .radio-group");\n    group.removeClass("input-error");\n    group.next(".error-container").hide();\n  } else {\n    $element.removeClass("input-error");\n    $element.next(".error-container").hide();\n  }\n}\n// 添加自定義驗證方法\nfunction addCustomValidationMethods() {\n  $.validator.addMethod("companyPhone", function (value, element) {\n    return this.optional(element) || /^0[0-9\\-+*#,;]*$/.test(value);\n  }, "請確認電話號碼格式為：0X-XXXXXXXX");\n  $.validator.addMethod("cellPhone", function (value, element) {\n    return this.optional(element) || /^09\\d{8}$/.test(value);\n  }, "請確認手機格式為：09XXXXXXXX");\n  $.validator.addMethod("checkboxGroup", function (value, element, param) {\n    return $(param + ":checked").length > 0;\n  }, "請至少選擇一個選項");\n}\n\n// 初始化\ndocument.addEventListener("DOMContentLoaded", () => {\n  // test();\n  initializeForm();\n  modifyLinkTargets();\n  renderStarRatings();\n  const collapse = document.querySelector(".collapse");\n  if (!collapse) return;\n  const collapseToggle = document.querySelector(".collapse__toggle");\n  if (!collapseToggle) return;\n  collapse.addEventListener("click", handleCollapseMenuClick);\n  collapseToggle.addEventListener("click", toggleMenu);\n  window.addEventListener("resize", () => {\n    hideMenu(collapse, collapseToggle);\n  });\n  const accordionHeader = document.querySelector(".accordion__header");\n  if (accordionHeader) {\n    accordionHeader.addEventListener("click", toggleAccordionContent);\n  }\n});\nfunction test() {\n  console.log("我是 test");\n}\nfunction all(a, b) {\n  // console.log();\n  return a + b;\n}\n\n// 加上這個判斷，可以在瀏覽器 console 直接呼叫函數\nif (typeof window !== "undefined") {\n  window.renderStarRatings = renderStarRatings;\n}\n\n// export default all;\n\n// all();\n\n//# sourceURL=webpack://myLibrary/./tpl_c/js/all.js?')}},__webpack_require__={d:(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},o:(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},__webpack_exports__={};return __webpack_modules__["./tpl_c/js/all.js"](0,__webpack_exports__,__webpack_require__),__webpack_exports__})()),myLibrary.renderStarRatings();